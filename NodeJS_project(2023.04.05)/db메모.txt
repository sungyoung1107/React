DB 생성
create database mydb default character set utf8;

사용자 계정 생성. IDENTIFIED BY 뒤에는 비밀번호
CREATE USER USER01 IDENTIFIED BY '1234';

계정 권한 주기. mydb에 대한 모든 접근 권한을 계정명@localhost
local에서만 권한을 주는 것이다. 지금 이 컴퓨터에서만 권한을 주는 것이다.
GRANT ALL PRIVILEGES ON mydb.* TO USER01@localhost IDENTIFIED BY '1234';

새로운 계정으로 시작하기
mysql -u USER01 -p
Enter password: 1234

일반적으로 Node.js 애플리케이션에서는 app, routes, views 등으로 구성되어 있습니다. 이들은 서로 다른 역할을 가지고 있으며, 함께 동작하여 웹 애플리케이션을 구성합니다.

app: Express 애플리케이션의 핵심 객체입니다. app 객체는 HTTP 요청과 응답을 처리하는 라우터, 미들웨어 등을 설정하고 관리합니다.

routes: app 객체의 라우팅 로직을 모듈화하여 관리하기 위한 디렉토리입니다. routes 디렉토리 내부에는 각각의 라우팅 로직을 담당하는 모듈이 위치합니다. 예를 들어, /users 경로로 들어오는 HTTP 요청을 처리하는 로직을 담당하는 users.js 파일이 위치할 수 있습니다.

views: Express에서는 view를 사용하여 HTML, CSS, JS 등의 프론트엔드 리소스를 관리합니다. views는 애플리케이션에서 렌더링될 HTML 템플릿을 담당하는 디렉토리입니다. views 디렉토리 내부에는 템플릿 엔진이 사용하는 템플릿 파일들이 위치합니다. 이 템플릿 파일들은 애플리케이션에서 클라이언트에게 보여지는 뷰(View)를 생성하는 데 사용됩니다.

app 객체는 routes 디렉토리 내의 모듈과 views 디렉토리 내의 템플릿 파일들을 활용하여 라우팅과 뷰 렌더링을 처리합니다. 즉, HTTP 요청이 발생하면 app 객체가 routes 디렉토리 내의 적절한 모듈을 찾아 라우팅 로직을 실행하고, 결과를 views 디렉토리 내의 템플릿 파일을 사용하여 뷰를 렌더링합니다. 이렇게 구성된 app, routes, views 등의 구성요소들이 함께 동작하여 웹 애플리케이션을 구성합니다.